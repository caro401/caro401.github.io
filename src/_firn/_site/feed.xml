<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="http://localhost:4000" rel="self" type="application/rss+xml"/><title></title><link>http://localhost:4000</link><description></description><generator>clj-rss</generator><item><description>&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8" /&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport" /&gt;&lt;meta content="" name="author" /&gt;&lt;meta content="" name="description" /&gt;&lt;title&gt;&lt;/title&gt;&lt;link href="http://localhost:4000/static/css/prism.css" rel="stylesheet" /&gt;&lt;link href="http://localhost:4000/static/css/firn_base.css" rel="stylesheet" /&gt;&lt;script src="http://localhost:4000/static/js/prism.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class="nav"&gt;&lt;a class="nav-links-item" href="http://localhost:4000/"&gt;&lt;span&gt;Home&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/about"&gt;&lt;span&gt;About&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/tags"&gt;&lt;span&gt;Tags&lt;/span&gt;&lt;/a&gt;&lt;/nav&gt;&lt;main&gt;&lt;article class="content"&gt;&lt;h1&gt;Testing Exceptions with Pytest&lt;/h1&gt;&lt;p class="frontmatter"&gt;Created: 2020-08-02 Last updated: 2021-01-21&lt;/p&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Every time I end up wanting to test that an expected exception is thrown with &lt;/span&gt;&lt;a class="firn-external" href="https://docs.pytest.org/en/latest/assert.html#assertions-about-expected-exceptions" target="_blank"&gt;Pytest&lt;/a&gt;&lt;span&gt;, I end up looking up the syntax, so here it is:&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;import pytest

def test_my_exception_is_raised():
    with pytest.raises(MyException):
        my_function()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;This test will fail if calling &lt;/span&gt;&lt;code&gt;my_function()&lt;/code&gt;&lt;span&gt; &lt;/span&gt;&lt;em&gt;&lt;span&gt;doesn't&lt;/span&gt;&lt;/em&gt;&lt;span&gt; raise an exception of the type &lt;/span&gt;&lt;code&gt;MyException&lt;/code&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;But what if I want to check the exception has the expected message too?&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;def test_my_exception_is_raised_with_message():
    with pytest.raises(MyException) as e:
        my_function()
    assert "my message" in str(e.value)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;In this case, &lt;/span&gt;&lt;code&gt;e&lt;/code&gt;&lt;span&gt; is of type &lt;/span&gt;&lt;a class="firn-external" href="https://docs.pytest.org/en/stable/reference.html#exceptioninfo" target="_blank"&gt;ExceptionInfo&lt;/a&gt;&lt;span&gt;, not actually &lt;/span&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;span&gt;, so you need to use &lt;/span&gt;&lt;code&gt;e.value&lt;/code&gt;&lt;span&gt; to get at the message. You can also assert things about the traceback of the exception via &lt;/span&gt;&lt;code&gt;e.traceback&lt;/code&gt;&lt;span&gt;, but I've not had a usecase for that recently.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;While I was looking this stuff up again, I found out that you can actually clean this up a bit in some situations, by doing a regex match on the string representation of the exception thrown, like this:&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;def test_my_exception_is_raised():
    with pytest.raises(MyException, match=r"^My message.*"):
        my_function()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;This uses &lt;/span&gt;&lt;a class="firn-external" href="https://docs.python.org/3/library/re.html#re.Pattern.search" target="_blank"&gt;re.search&lt;/a&gt;&lt;span&gt; to do the matching, and see the &lt;/span&gt;&lt;a class="firn-external" href="https://docs.python.org/3/library/re.html#regular-expression-syntax" target="_blank"&gt;Python docs&lt;/a&gt;&lt;span&gt; for a quick regex reference.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;I think I'd use this regex method if I wanted to assert something like the presence of a particular error code somewhere in my error message, but the more verbose version when I'm asserting something about the message that depends on the context of my test, such as is the ID of the thing I just tried to put into my database in the error message.&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;def test_this_raises_error_code_1234():
    with pytest.raises(MyException, match=r"1234"):
        myfunction()

def test_this_raises_error_including_item_id_and_data():
    my_test_id, my_test_data = "XXXX", {"some": "data"}
    my_test_object = MyThing(id=my_test_id, data=my_test_data)

    with pytest.raises(MyException) as e:
        my_function(my_test_object)

    assert f"Couldn't process MyThing {my_test_id} with data {my_test_data}!" in str(e.value)
&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/article&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;</description><pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate><title>Testing Exceptions with Pytest</title><link>pytest-exception</link></item><item><description>&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8" /&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport" /&gt;&lt;meta content="" name="author" /&gt;&lt;meta content="" name="description" /&gt;&lt;title&gt;&lt;/title&gt;&lt;link href="http://localhost:4000/static/css/prism.css" rel="stylesheet" /&gt;&lt;link href="http://localhost:4000/static/css/firn_base.css" rel="stylesheet" /&gt;&lt;script src="http://localhost:4000/static/js/prism.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class="nav"&gt;&lt;a class="nav-links-item" href="http://localhost:4000/"&gt;&lt;span&gt;Home&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/about"&gt;&lt;span&gt;About&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/tags"&gt;&lt;span&gt;Tags&lt;/span&gt;&lt;/a&gt;&lt;/nav&gt;&lt;main&gt;&lt;article class="content"&gt;&lt;h1&gt;Making MyPy play nice with Pydantic&lt;/h1&gt;&lt;p class="frontmatter"&gt;Created: 2020-07-10 Last updated: 2021-01-21&lt;/p&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;I ran into a problem at work today that I was &lt;/span&gt;&lt;em&gt;&lt;span&gt;sure&lt;/span&gt;&lt;/em&gt;&lt;span&gt; I had seen before, but had forgotten what the fix was, so this time I'm writing it down.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;I'm really enjoying using &lt;/span&gt;&lt;a class="firn-external" href="https://pydantic-docs.helpmanual.io/" target="_blank"&gt;Pydantic&lt;/a&gt;&lt;span&gt; at the moment to help with validating the shape of inputs to some of my functions, and allowing me to define some data structures (called "models") that my brain can think of as types for use in my code. It will also throw errors at runtime if you try to construct a pydantic model from something that doesn't fit the type.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;However, the company also tries to use native Python type hints, and is starting to actually check them using &lt;/span&gt;&lt;a class="firn-external" href="https://mypy.readthedocs.io/en/stable/" target="_blank"&gt;MyPy&lt;/a&gt;&lt;span&gt;. Turns out, if you have a Pydantic model, i.e.Â something that inherits from &lt;/span&gt;&lt;code&gt;pydantic.BaseModel&lt;/code&gt;&lt;span&gt;, MyPy fails the typechecking, with an error that looks like &lt;/span&gt;&lt;code&gt;src/my_file.py:12: error: Class cannot subclass 'BaseModel' (has type 'Any')&lt;/code&gt;&lt;span&gt;. But I know that &lt;/span&gt;&lt;code&gt;BaseModel&lt;/code&gt;&lt;span&gt; doesn't have type &lt;/span&gt;&lt;code&gt;Any&lt;/code&gt;&lt;span&gt; and so does &lt;/span&gt;&lt;a class="firn-external" href="https://www.jetbrains.com/pycharm/" target="_blank"&gt;PyCharm&lt;/a&gt;&lt;span&gt;, so why doesn't MyPy?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Turns out, there's a plugin for MyPy to fix this. It's documented pretty well in the &lt;/span&gt;&lt;a class="firn-external" href="https://pydantic-docs.helpmanual.io/mypy_plugin/" target="_blank"&gt;Pydantic docs&lt;/a&gt;&lt;span&gt; (which are awesome!), but I failed to read them, and wasn't pointed there when I tried googling my error messages. So, I needed to add a config file for MyPy, and add this plugin:&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-ini"&gt;&lt;code class="language-ini"&gt;# mypy.ini
[mypy]
plugins = pydantic.mypy

[pydantic-mypy]
init_forbid_extra = True
init_typed = True
warn_required_dynamic_aliases = True
warn_untyped_fields = True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;The first section adds the plugin, and the second turns on some options to make the checking even more strict. See &lt;/span&gt;&lt;a class="firn-external" href="https://pydantic-docs.helpmanual.io/mypy_plugin/#plugin-settings" target="_blank"&gt;the Pydantic docs&lt;/a&gt;&lt;span&gt; for what these settings actually do.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;So now the MyPy settings are in place, if I run the type checker again, I get an error that Pydantic isn't installed. This is true, since we run MyPy from a stripped-down &lt;/span&gt;&lt;a class="firn-external" href="https://tox.readthedocs.io/en/latest/" target="_blank"&gt;tox&lt;/a&gt;&lt;span&gt; environment with only the linter, formatters and MyPy itself installed. Let's fix that. The relevant section of the (really rather long) &lt;/span&gt;&lt;code&gt;tox.ini&lt;/code&gt;&lt;span&gt; file needs to look like:&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-ini"&gt;&lt;code class="language-ini"&gt;[base]
lint_targets = src tests

[testenv:lint]
description = Lint using black, flake8 and isort. Type-check using Mypy.
deps =
    black
    flake8
    isort
    mypy
    pydantic # add this! or put it in a requirements.txt and install from there
commands =
    isort --check-only --diff {[base]lint_targets}
    black --check --diff {[base]lint_targets}
    flake8 {[base]lint_targets}
    mypy --ignore-missing-imports --strict {toxinidir}/src
    mypy --ignore-missing-imports {toxinidir}/tests/unit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;And yay! everything works!&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;div class="firn-headline-section firn-headline-section-2"&gt;&lt;h2 class="firn-headline firn-headline-2" id="afterword"&gt;&lt;span class="firn-headline-text"&gt;&lt;span&gt;Afterword&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;This section of &lt;/span&gt;&lt;code&gt;tox.ini&lt;/code&gt;&lt;span&gt; includes a couple of my favourite Python tools, which I thought might be worth a mention:&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="firn-external" href="https://black.readthedocs.io/en/stable/" target="_blank"&gt;black&lt;/a&gt;&lt;span&gt; for automatically formatting code. I don't love the style of the formatting it does, but I absolutely do love the lack of configurability - I have better things to do with my day than argue with my team about formatting
  conventions.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="firn-external" href="https://readthedocs.org/projects/isort/" target="_blank"&gt;isort&lt;/a&gt;&lt;span&gt; for sorting your import statements. This has a million configuration options, but the company has a default set to use so I personally don't have to think about it. While PyCharm can do this, not everyone on my team uses it,
  and I often forget to run formatting anyways, so having something that will just fix things is great.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Basically, I'm a fan of anything that can automatically fix silly mistakes I make, and get code written by many people into a consistent style without arguments. We actually have a tox environment to do this fixing for us, with the relevant section of &lt;/span&gt;&lt;code&gt;tox.ini&lt;/code&gt;&lt;span&gt; looking like&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-ini"&gt;&lt;code class="language-ini"&gt;[testenv:autoformat]
description = Autoformat all Python files using isort and black.
deps =
    black
    isort[pyproject]
commands =
    isort {[base]lint_targets}
    black --verbose {[base]lint_targets}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;Personally I'd rather this was a &lt;/span&gt;&lt;a class="firn-external" href="https://git-scm.com/docs/githooks" target="_blank"&gt;pre-commit hook&lt;/a&gt;&lt;span&gt; so I couldn't forget to run it, but that's a problem for another day.&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;</description><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><title>Making MyPy play nice with Pydantic</title><link>mypy-pydantic</link></item><item><description>&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8" /&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport" /&gt;&lt;meta content="" name="author" /&gt;&lt;meta content="" name="description" /&gt;&lt;title&gt;&lt;/title&gt;&lt;link href="http://localhost:4000/static/css/prism.css" rel="stylesheet" /&gt;&lt;link href="http://localhost:4000/static/css/firn_base.css" rel="stylesheet" /&gt;&lt;script src="http://localhost:4000/static/js/prism.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class="nav"&gt;&lt;a class="nav-links-item" href="http://localhost:4000/"&gt;&lt;span&gt;Home&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/about"&gt;&lt;span&gt;About&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/tags"&gt;&lt;span&gt;Tags&lt;/span&gt;&lt;/a&gt;&lt;/nav&gt;&lt;main&gt;&lt;article class="content"&gt;&lt;h1&gt;Pretty git Log&lt;/h1&gt;&lt;p class="frontmatter"&gt;Created: 2020-05-17 &lt;/p&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;I have an alias (&lt;/span&gt;&lt;code&gt;glp&lt;/code&gt;&lt;span&gt;) saved in my shell for making a pretty git log.&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-bash"&gt;&lt;code class="language-bash"&gt;git log --graph --abbrev-commit --decorate --format=format:"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n%C(white)%s%C(reset)%C(dim white)- %an%C(reset)"
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;I honestly don't care what all the bits do, and stole the line from &lt;/span&gt;&lt;a class="firn-external" href="https://stackoverflow.com/a/9074343" target="_blank"&gt;stack overflow&lt;/a&gt;&lt;span&gt;, but I use it a lot.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;It looks like:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="http://localhost:4000/data/glp.png" /&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/article&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;</description><pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate><title>Pretty git Log</title><link>bash-snippet-1</link></item><item><description>&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8" /&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport" /&gt;&lt;meta content="" name="author" /&gt;&lt;meta content="" name="description" /&gt;&lt;title&gt;&lt;/title&gt;&lt;link href="http://localhost:4000/static/css/prism.css" rel="stylesheet" /&gt;&lt;link href="http://localhost:4000/static/css/firn_base.css" rel="stylesheet" /&gt;&lt;script src="http://localhost:4000/static/js/prism.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class="nav"&gt;&lt;a class="nav-links-item" href="http://localhost:4000/"&gt;&lt;span&gt;Home&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/about"&gt;&lt;span&gt;About&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/tags"&gt;&lt;span&gt;Tags&lt;/span&gt;&lt;/a&gt;&lt;/nav&gt;&lt;main&gt;&lt;article class="content"&gt;&lt;h1&gt;git Toolkit&lt;/h1&gt;&lt;p class="frontmatter"&gt;Created: 2020-05-17 &lt;/p&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;a class="firn-external" href="https://git-scm.com/" target="_blank"&gt;git&lt;/a&gt;&lt;span&gt; is both really useful and really horrible to use, and can be completely overwhelming when you first start with it. There's so many commands, many of which you only use very occasionally, if you are doing something particularly complex or you made a mess and need to fix it. This all makes getting started with git a bit tricky. I have a bunch of friends who are learning programming right now, and struggled to find a way to show the small corner of git that I actually use regularly. So here it is.&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;div class="firn-headline-section firn-headline-section-2"&gt;&lt;h2 class="firn-headline firn-headline-2" id="starting-on-a-new-project"&gt;&lt;span class="firn-headline-text"&gt;&lt;span&gt;Starting on a new project&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;pre class="language-sh"&gt;&lt;code class="language-sh"&gt;git clone https://gitlab.com/something/my-project.git &amp;&amp; cd my-project
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;This &lt;/span&gt;&lt;em&gt;&lt;span&gt;clones&lt;/span&gt;&lt;/em&gt;&lt;span&gt; (something like downloading, but also bringing history) a git repository from the URL you pass (in this case called &lt;/span&gt;&lt;code&gt;my-project&lt;/code&gt;&lt;span&gt; and coming from &lt;/span&gt;&lt;a class="firn-external" href="https://gitlab.com/" target="_blank"&gt;GitLab&lt;/a&gt;&lt;span&gt;), and then moves you into that directory. I often used to forget the second bit and then get confused, so now I tend to stick it on the end of the &lt;/span&gt;&lt;code&gt;clone&lt;/code&gt;&lt;span&gt; command.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Using a HTTPS URL tends to be simpler for new programmers than using SSH, as it means you can just use your credentials later on, rather than having to worry about setting up an SSH key for the service you are using. However, if you want to do that, GitLab has some &lt;/span&gt;&lt;a class="firn-external" href="https://docs.gitlab.com/ee/ssh/" target="_blank"&gt;great docs&lt;/a&gt;&lt;span&gt; on how to do it.&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;div class="firn-headline-section firn-headline-section-2"&gt;&lt;h2 class="firn-headline firn-headline-2" id="starting-some-work"&gt;&lt;span class="firn-headline-text"&gt;&lt;span&gt;Starting some work&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Before doing this, make sure you are on the master branch and don't have any local changes. You can find this out by running&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-bash"&gt;&lt;code class="language-bash"&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;and if everything is good, the output will look like:&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-shell-session"&gt;&lt;code class="language-shell-session"&gt;$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;If you've waited a while before starting work, you probably want to make sure your local repository is up to date, and that you have all the work that other people have done on the project in the mean time. So run:&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-bash"&gt;&lt;code class="language-bash"&gt;git pull
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;to update your local copy with things that have been changed by other people. Assuming you haven't made any changes yet, this should &lt;/span&gt;&lt;em&gt;&lt;span&gt;just work&lt;/span&gt;&lt;/em&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;So, now you want to add a feature or fix a bug or something. How does that work? Probably you don't want to just commit everything straight to &lt;/span&gt;&lt;code&gt;master&lt;/code&gt;&lt;span&gt; - this will likely make the maintainer sad. So, let's make a new &lt;/span&gt;&lt;em&gt;&lt;span&gt;branch&lt;/span&gt;&lt;/em&gt;&lt;span&gt; where we can do the work - think of this kind of like a separate workspace based on the current state of master. This looks like:&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-bash"&gt;&lt;code class="language-bash"&gt;git checkout -b feature/10-shiny-new-feature
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;So, &lt;/span&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;span&gt; is how you make git move to a new branch. Since you want to move to a branch that doesn't yet exist, you need to use the &lt;/span&gt;&lt;code&gt;-b&lt;/code&gt;&lt;span&gt; flag to create that branch. I tend to give my branches quite long names, similar to how we name things at work. The first bit is either feature or bugfix, depending on what type of work is being done. The next is a ticket number (if applicable) - so you can link the work with the ticket that made it happen, and vice versa. The last bit is a short description of what the work will be, since I don't always remember what a ticket number actually means.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Now you can actually do the work!&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;div class="firn-headline-section firn-headline-section-2"&gt;&lt;h2 class="firn-headline firn-headline-2" id="when-you&amp;apos;ve-done-some-work"&gt;&lt;span class="firn-headline-text"&gt;&lt;span&gt;When you've done some work&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Now the corner of git you need to care about is the idea of a &lt;/span&gt;&lt;em&gt;&lt;span&gt;commit&lt;/span&gt;&lt;/em&gt;&lt;span&gt; - think of this like saving a checkpoint of your work. I tend to commit quite often, whenever some meaningful chunk of work is done (regardless of whether the thing is complete or working).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;First, make sure the changes that git can see are what you expect - back to&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-bash"&gt;&lt;code class="language-bash"&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;There's two kinds of change you can expect to see - either you've changed an existing file, or you've made a new file. Here's an example of both of these, from what the git history of this website looks like just now:&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-shell-session"&gt;&lt;code class="language-shell-session"&gt;$ git status
On branch feature/git-words

Changes not staged for commit:
    (use "git add &lt;file&gt;..." to update what will be committed)
    (use "git restore &lt;file&gt;..." to discard changes in working directory)
    modified:   static/global.css

Untracked files:
    (use "git add &lt;file&gt;..." to include in what will be committed)
    content/git-toolkit/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;So, git has seen that I've made changes to &lt;/span&gt;&lt;code&gt;global.css&lt;/code&gt;&lt;span&gt;, and added some new files in the directory &lt;/span&gt;&lt;code&gt;content/git-toolkit&lt;/code&gt;&lt;span&gt;. That's what I expected, so now I can tell git that these are the changes I will want to save. This means I need to run&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-bash"&gt;&lt;code class="language-bash"&gt;git add .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;Here &lt;/span&gt;&lt;code&gt;.&lt;/code&gt;&lt;span&gt; means the current working directory, but you can think of it like "add all the things". Check this did what you expected like&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-shell-session"&gt;&lt;code class="language-shell-session"&gt;$ git status
On branch feature/git-words

Changes to be committed:
    (use "git restore --staged &lt;file&gt;..." to unstage)
    new file:   content/git-toolkit/index.md
    modified:   static/global.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;I'm paranoid so tend to also check now that the individual changes are what I expected, and if not go back and fix them before committing. You can see this with&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-bash"&gt;&lt;code class="language-bash"&gt;git diff --staged
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;This will open then changes you have made compared to the last commit inside &lt;/span&gt;&lt;a class="firn-external" href="https://en.wikipedia.org/wiki/Less_(Unix)" target="_blank"&gt;=less=&lt;/a&gt;&lt;span&gt; in your terminal, and you can scroll through them with arrow keys and quit with &lt;/span&gt;&lt;code&gt;q&lt;/code&gt;&lt;span&gt;. Again, sanity check that these are what you expected. Then you can "save" these changes as a chunk of work with a description.&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-bash"&gt;&lt;code class="language-bash"&gt;git commit -m "Did some work"
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;So, this tells git to save this work, with the label that you provide. Try to write something slightly more descriptive than this example! Repeat the steps from this section until you are done implementing the feature or bugfix.&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;div class="firn-headline-section firn-headline-section-2"&gt;&lt;h2 class="firn-headline firn-headline-2" id="share-the-work"&gt;&lt;span class="firn-headline-text"&gt;&lt;span&gt;Share the work&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;So you've done some work, and made some commits on your branch (with helpful messages to explain what you've done), and your feature is ready to go. Now you can run&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-bash"&gt;&lt;code class="language-bash"&gt;git push
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;to "upload" this work to the shared repository on GitLab or whatever. Almost certainly git will give you an error if its the first time you pushed to this branch - it will look like this:&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-shell-session"&gt;&lt;code class="language-shell-session"&gt;$ git push
fatal: The current branch feature/some-work has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin feature/some-work
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;Thankfully, git also tells you how to fix it - just run the command it tells you to (or run &lt;/span&gt;&lt;a class="firn-external" href="https://github.com/nvbn/thefuck" target="_blank"&gt;fuck&lt;/a&gt;&lt;span&gt;!).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;If you are working on GitLab, the output from pushing will include a URL to allow you to make a "merge request", which is a way to ask the project maintainer to add your code back into the master branch of the project, so it actually gets used. Click this URL and fill in the details in your browser. You will probably get review comments, in which case you can go back and fix them like in the previous section, then push them to your existing branch. Once the maintainer is happy, they will approve your merge request and merge your code into master. YAY!&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;div class="firn-headline-section firn-headline-section-2"&gt;&lt;h2 class="firn-headline firn-headline-2" id="and-repeat"&gt;&lt;span class="firn-headline-text"&gt;&lt;span&gt;...and repeat&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;So now your feature is done and merged and you want to start something new. Go back to the master branch, and update it to get your changes, and any changes made by other people while you were working on your thing.&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-bash"&gt;&lt;code class="language-bash"&gt;git checkout master &amp;&amp; git pull
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;Note that this time there's no &lt;/span&gt;&lt;code&gt;-b&lt;/code&gt;&lt;span&gt; with the checkout - this is because master already exists, you don't need to create it.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Now you can go back to &lt;/span&gt;&lt;a href="#starting-some-work"&gt;work&lt;/a&gt;&lt;span&gt; and do it all again!&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;div class="firn-headline-section firn-headline-section-2"&gt;&lt;h2 class="firn-headline firn-headline-2" id="when-stuff-goes-wrong"&gt;&lt;span class="firn-headline-text"&gt;&lt;span&gt;When stuff goes wrong&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Sometimes things go wrong with git - maybe you get a merge conflict when you pull, or you added something you shouldn't to a commit. At this point, I (and basically all other developers I know) resort to reading the output that git gives you (actually helpful sometimes!) and googling. THIS IS OK.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;My other favourite resource for these situations is &lt;/span&gt;&lt;a class="firn-external" href="https://wizardzines.com/zines/oh-shit-git/" target="_blank"&gt;Oh Shit, Git!&lt;/a&gt;&lt;span&gt; by Julia Evans. I have a well-thumbed copy in my desk drawer and turn to it often. Generally, all the stuff from &lt;/span&gt;&lt;a class="firn-external" href="https://wizardzines.com/" target="_blank"&gt;wizardzines&lt;/a&gt;&lt;span&gt; is AMAZING, I highly recommend all the zines.&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;</description><pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate><title>git Toolkit</title><link>git-toolkit</link></item><item><description>&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8" /&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport" /&gt;&lt;meta content="" name="author" /&gt;&lt;meta content="" name="description" /&gt;&lt;title&gt;&lt;/title&gt;&lt;link href="http://localhost:4000/static/css/prism.css" rel="stylesheet" /&gt;&lt;link href="http://localhost:4000/static/css/firn_base.css" rel="stylesheet" /&gt;&lt;script src="http://localhost:4000/static/js/prism.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class="nav"&gt;&lt;a class="nav-links-item" href="http://localhost:4000/"&gt;&lt;span&gt;Home&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/about"&gt;&lt;span&gt;About&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/tags"&gt;&lt;span&gt;Tags&lt;/span&gt;&lt;/a&gt;&lt;/nav&gt;&lt;main&gt;&lt;article class="content"&gt;&lt;h1&gt;Sorting a list of objects in JavaScript&lt;/h1&gt;&lt;p class="frontmatter"&gt;Created: 2020-05-16 &lt;/p&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;I needed to sort a list of JS objects (in this case representing the data for a post on this blog) by the value of one of the properties of each object (date). Under the hood, each post looks like:&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-javascript"&gt;&lt;code class="language-javascript"&gt;post = {
  slug: "my-slug",
  title: "Post Title",
  date: "2020-05-16",
  author: "Caro Appleby",
  tldr: "words words words",
  tags: ["js", "snippet"],
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;Because the date is in a sensible format, I can just sort the date strings alphabetically. &lt;/span&gt;&lt;code&gt;sort()&lt;/code&gt;&lt;span&gt; in JS can take a function which tells you how to compare two elements of the list. So my brain goes to a Haskell type signature &lt;/span&gt;&lt;code&gt;compareFn :: a -&gt; a -&gt; Int&lt;/code&gt;&lt;span&gt;. So you have an array of things of type &lt;/span&gt;&lt;code&gt;a&lt;/code&gt;&lt;span&gt;, the function gets two of these elements, and the &lt;/span&gt;&lt;code&gt;Int&lt;/code&gt;&lt;span&gt; you get back tells you which of them should be sorted to a lower index (i.e.Â come before). If the return value is &lt;0, the first one comes first, if its &gt;0 then the second one comes first.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;So, I can sort my array of post objects like:&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-javascript"&gt;&lt;code class="language-javascript"&gt;sortedPosts = posts.sort((a, b) =&gt; (a.date &lt; b.date) ? 1 : -1);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;if I want them to come back with the newest one first in the array.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a class="firn-external" href="https://flaviocopes.com/how-to-sort-array-of-objects-by-property-javascript/" target="_blank"&gt;Reference blog post&lt;/a&gt;&lt;span&gt; and the &lt;/span&gt;&lt;a class="firn-external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank"&gt;MDN docs&lt;/a&gt;&lt;span&gt; on &lt;/span&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;span&gt;. Oh, and the syntax for the &lt;/span&gt;&lt;a class="firn-external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" target="_blank"&gt;ternary operator&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/article&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;</description><pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate><title>Sorting a list of objects in JavaScript</title><link>js-snippet-1</link></item><item><description>&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8" /&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport" /&gt;&lt;meta content="" name="author" /&gt;&lt;meta content="" name="description" /&gt;&lt;title&gt;&lt;/title&gt;&lt;link href="http://localhost:4000/static/css/prism.css" rel="stylesheet" /&gt;&lt;link href="http://localhost:4000/static/css/firn_base.css" rel="stylesheet" /&gt;&lt;script src="http://localhost:4000/static/js/prism.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class="nav"&gt;&lt;a class="nav-links-item" href="http://localhost:4000/"&gt;&lt;span&gt;Home&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/about"&gt;&lt;span&gt;About&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/tags"&gt;&lt;span&gt;Tags&lt;/span&gt;&lt;/a&gt;&lt;/nav&gt;&lt;main&gt;&lt;article class="content"&gt;&lt;h1&gt;Use CSS to scroll a thing that is too big for the screen&lt;/h1&gt;&lt;p class="frontmatter"&gt;Created: 2020-05-16 &lt;/p&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;When I first made the code blocks on this site, then went to look at it on mobile, the code ran off the edge of the screen and outside its nice block background. This is UGLY and also pretty hard to read.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="http://localhost:4000/data/eww-nasty-code.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Turns out, CSS has a nice way around this - tell the element to add a scroll bar when the thing is too wide. This looks like:&lt;/span&gt;&lt;/p&gt;&lt;pre class="language-css"&gt;&lt;code class="language-css"&gt;pre {
  overflow-x: auto;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;The other options are &lt;/span&gt;&lt;code&gt;visible&lt;/code&gt;&lt;span&gt; (the default one) which makes the content spill out of its box, &lt;/span&gt;&lt;code&gt;hidden&lt;/code&gt;&lt;span&gt; which truncates it at the boundaries, and &lt;/span&gt;&lt;code&gt;scroll&lt;/code&gt;&lt;span&gt; which makes there always be a scrollbar if your OS says so. I was originally bitten by the fact that MacOS hides scrollbars, so set it to &lt;/span&gt;&lt;code&gt;scroll&lt;/code&gt;&lt;span&gt; and then looked at the site on Linux and realised it had a scrollbar regardless of whether one was actually required. &lt;/span&gt;&lt;code&gt;auto&lt;/code&gt;&lt;span&gt; means one is added only when you actually need it.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;I also learned that &lt;/span&gt;&lt;code&gt;pre&lt;/code&gt;&lt;span&gt; is HTML element which wraps code blocks in the way this site is implemented, and is for putting "preformatted text" in, i.e.Â text that is meant to be displayed as it is in the HTML file. There's also &lt;/span&gt;&lt;code&gt;code&lt;/code&gt;&lt;span&gt; for inline code.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;MDN docs for &lt;/span&gt;&lt;a class="firn-external" href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x" target="_blank"&gt;overflow-x&lt;/a&gt;&lt;span&gt; HTML &lt;/span&gt;&lt;a class="firn-external" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre" target="_blank"&gt;pre element&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a class="firn-external" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code" target="_blank"&gt;code element&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/article&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;</description><pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate><title>Use CSS to scroll a thing that is too big for the screen</title><link>css-snippet-1</link></item><item><description>&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8" /&gt;&lt;meta content="width=device-width, initial-scale=1.0" name="viewport" /&gt;&lt;meta content="" name="author" /&gt;&lt;meta content="" name="description" /&gt;&lt;title&gt;&lt;/title&gt;&lt;link href="http://localhost:4000/static/css/prism.css" rel="stylesheet" /&gt;&lt;link href="http://localhost:4000/static/css/firn_base.css" rel="stylesheet" /&gt;&lt;script src="http://localhost:4000/static/js/prism.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class="nav"&gt;&lt;a class="nav-links-item" href="http://localhost:4000/"&gt;&lt;span&gt;Home&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/about"&gt;&lt;span&gt;About&lt;/span&gt;&lt;/a&gt;&lt;a class="nav-links-item" href="http://localhost:4000/tags"&gt;&lt;span&gt;Tags&lt;/span&gt;&lt;/a&gt;&lt;/nav&gt;&lt;main&gt;&lt;article class="content"&gt;&lt;h1&gt;Hello, world!&lt;/h1&gt;&lt;p class="frontmatter"&gt;Created: 2020-05-15 Last updated: 2021-01-21&lt;/p&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;UPDATE: This is no longer true. TODO write a post explaining what is true now!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;This thing is made using &lt;/span&gt;&lt;a class="firn-external" href="https://svelte.dev/" target="_blank"&gt;svelte&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a class="firn-external" href="https://sapper.svelte.dev/" target="_blank"&gt;sapper&lt;/a&gt;&lt;span&gt;. It starts from the &lt;/span&gt;&lt;a class="firn-external" href="https://github.com/sveltejs/sapper-template" target="_blank"&gt;sapper template&lt;/a&gt;&lt;span&gt; and steals a bunch of things from &lt;/span&gt;&lt;a class="firn-external" href="https://github.com/22mahmoud/mahmoudashraf.dev" target="_blank"&gt;this GitHub repo&lt;/a&gt;&lt;span&gt;. It's pretty bare-bones for now, but I really just wanted something simple where I could understand all the parts. The theme is based on &lt;/span&gt;&lt;a class="firn-external" href="https://draculatheme.com/" target="_blank"&gt;Dracula&lt;/a&gt;&lt;span&gt;, which I use for everything possible.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;I don't really do anything to do with web programming at all, so this is all pretty new to me. However, I'm working on a web project with some friends that uses these technologies, so figured I'd better learn something about how they work.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;I'm planning to write random ramblings about all kinds of things. Programming mostly, since that's what I do for work, and I'm always learning things which current me wishes past me wrote down somewhere. But also maybe knitting, linguistics, &lt;/span&gt;&lt;a class="firn-external" href="https://www.instagram.com/malmandlack/" target="_blank"&gt;guinea pigs&lt;/a&gt;&lt;span&gt; and sketchnotes. Or some crazy mashup of them all, who knows.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Expect the writing to be rough and somewhat stream of consciousness - I'm aiming to capture thought processes and learnings rather than write a novel.&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/article&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;</description><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><title>Hello, world!</title><link>hello-world</link></item></channel></rss>